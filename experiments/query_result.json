[
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 8.871526962535473
        },
        "code": {
            "distance": 36.079097421314245
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理系统。主类SFPP包含main方法,创建了ConfigManager实例并调用其方法。程序首先通过loadConfig()方法初始化配置数据,该方法在ConfigManager对象中创建一个HashMap并存入服务器URL和端口等键值对。随后,程序调用getConfig()方法获取特定配置项,分别读取服务器URL并直接打印,以及读取服务器端口并将其解析为整数后打印。整个流程为:初始化配置管理器 → 加载配置数据 → 检索配置值 → 处理并输出配置信息。ConfigManager类负责配置数据的存储和检索,通过HashMap实现键值对的管理。",
            "distance": 7.304565138112019
        },
        "code": {
            "distance": 43.8741235221575
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理系统。主类SFPP包含main方法,创建了ConfigManager实例并调用其方法。程序首先通过loadConfig()方法初始化配置数据,该方法在ConfigManager对象中创建一个HashMap并存入服务器URL和端口等键值对。随后,程序调用getConfig()方法获取特定配置项,分别读取服务器URL并直接打印,以及读取服务器端口并将其解析为整数后打印。整个流程为:初始化配置管理器 → 加载配置数据 → 检索配置值 → 处理并输出配置信息。ConfigManager类负责配置数据的存储和检索,通过HashMap实现键值对的管理。",
            "distance": 8.522334485188965
        },
        "code": {
            "distance": 29.139834241251926
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 7.77659098931047
        },
        "code": {
            "distance": 28.70823052774368
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 8.76945012187778
        },
        "code": {
            "distance": 21.511128529096947
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 7.892886643237847
        },
        "code": {
            "distance": 52.10254670221847
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 6.382254854679444
        },
        "code": {
            "distance": 26.869386653459728
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 7.9269439051386525
        },
        "code": {
            "distance": 21.436311021746107
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 7.846196326904936
        },
        "code": {
            "distance": 34.0438588052017
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 9.531447172188253
        },
        "code": {
            "distance": 41.84876298951457
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理系统。主类SFPP包含main方法,创建了ConfigManager实例并调用其方法。程序首先通过loadConfig()方法初始化配置数据,该方法在ConfigManager对象中创建一个HashMap并存入服务器URL和端口等键值对。随后,程序调用getConfig()方法获取特定配置项,分别读取服务器URL并直接打印,以及读取服务器端口并将其解析为整数后打印。整个流程为:初始化配置管理器 → 加载配置数据 → 检索配置值 → 处理并输出配置信息。ConfigManager类负责配置数据的存储和检索,通过HashMap实现键值对的管理。",
            "distance": 7.687188275370067
        },
        "code": {
            "distance": 23.055039159145537
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 8.594960499015285
        },
        "code": {
            "distance": 22.7107610434543
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 8.220981887065701
        },
        "code": {
            "distance": 25.874423039981938
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 7.266650292754095
        },
        "code": {
            "distance": 77.95353078682143
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 6.86099412361064
        },
        "code": {
            "distance": 35.360620227633326
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 7.166624477570299
        },
        "code": {
            "distance": 26.053717885563398
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 6.890469827839652
        },
        "code": {
            "distance": 28.499784046668267
        }
    },
    {
        "cwe": "78",
        "semantic": {
            "documents": "这段代码实现了一个简单的配置管理器,通过loadConfig方法初始化配置映射,然后通过getConfig方法获取配置值。静态分析工具可能会误报getConfig方法中的configs字段可能为null,因为它无法识别典型的初始化-使用模式,即loadConfig必须在getConfig之前调用的隐含约定。这种模式常见于需要延迟初始化资源的场景,如配置管理、连接池或资源管理器,其中初始化和使用遵循特定顺序,但这种顺序约束对静态分析工具不可见。这段代码实现了一个简单的配置管理功能。SFPP类的main方法演示了配置管理器的使用流程:创建ConfigManager实例,调用loadConfig方法初始化配置,然后通过getConfig方法获取指定键的配置值并打印。ConfigManager类使用Map数据结构存储配置信息,loadConfig方法负责创建HashMap实例并设置初始键值对。getConfig方法接收一个键参数,返回对应的配置值。整个程序的执行顺序是:实例化配置管理器 → 加载配置数据 → 获取特定配置值 → 输出配置值。",
            "distance": 8.064534894190281
        },
        "code": {
            "distance": 35.35400573068596
        }
    }
]